version: '3.4'

services:
  catalogdb1:
    image: mongo
    networks:
      - amcart_network

  identitydb:
    image: mcr.microsoft.com/mssql/server:2017-latest
    container_name: identitydb
    environment:
      SA_PASSWORD: "Pass@word123"
      ACCEPT_EULA: "Y"
    restart: always
    ports:
      - 1444:1433
    volumes:
      - identity_data:/var/opt/mssql
    networks:
      - amcart_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=changeme
      # - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - xpack.security.enabled=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300" # Add transport port for cluster communication
    networks:
      - amcart_network
    healthcheck: # Add a healthcheck
      test: ["CMD-SHELL", "curl -fs http://localhost:9200/_cluster/health?pretty || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kibana:
      image: kibana:8.5.0 
      container_name: kibana
      ports:
        - "5601:5601"
      depends_on:
        - elasticsearch
      networks:
        - amcart_network
      volumes:
        - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml # Mount the config file

  # basketdb:
  #   image: redis:alpine

  # discountdb:
  #   image: postgres

  # orderdb:
  #   image: mcr.microsoft.com/mssql/server:2017-latest

  # rabbitmq:
  #   image: rabbitmq:3-management-alpine

  amcart.catalog.api:
    image: ${DOCKER_REGISTRY-}amcart.catalog.api
    build:
      context: .
      # dockerfile: Services/Catalog/Catalog.API/Dockerfile
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
      # dockerfile: C:\D\AmCart\src\Services\Catalog\Catalog.API

  amcart.productsearch.api:
    image: ${DOCKER_REGISTRY-}amcart.productsearch.api
    build:
      context: .
      dockerfile: Services/ProductSearch/AmCart.ProductSearch.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ELASTICSEARCH_URI=http://elasticsearch:9200  # Elasticsearch URI
      - ELASTICSEARCH_DEFAULT_INDEX=products  # Default index (or set to an index of your choice)
      - MongoDbConnection=mongodb://catalogdb1:27017"
    ports:
      # - "8002:80"
      - "8002:8080"
    depends_on:
      - elasticsearch
      - catalogdb1
    networks:
      - amcart_network
    restart: always

  amcart.identity.api:
    image: ${DOCKER_REGISTRY-}amcart.identity.api
    build:
      context: .
      dockerfile: Services/Identity/AmCart.Identity.API/Dockerfile
    # environment:
    #   - ASPNETCORE_ENVIRONMENT=Development
    #   # - ConnectionStrings__IdentityConnection=Server=identitydb;Database=Identity;User Id=sa;Password=Pass@word123; # Use Docker secrets for password!
    #   - "ConnectionStrings:IdentityDb=Server=identitydb;Database=IdentityDb;User Id=sa;Password=Pass@word123;"
    #   - IdentityIssuer=https://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:8021
    #   # ... other IdentityServer environment variables (clients, secrets, signing keys, etc.) - See below
    # ports:
    #   - "8003:80" # Or 5000:5000 if that's what your app uses
    #   - "8004:443" # Expose HTTPS port if configured
    # volumes:
    #   - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
    #   - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    # depends_on:
    #   - identitydb
    # networks:
    #   - amcart_network
    # restart: always
    # healthcheck: # Important for IdentityServer
    #   test: ["CMD-SHELL", "curl -fs http://localhost:8003/.well-known/openid-configuration || exit 1"] # Adjust port if necessary
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 20s

  # basket.api:
  #   image: ${DOCKER_REGISTRY-}basketapi
  #   build:
  #     context: .
  #     dockerfile: Services/Basket/Basket.API/Dockerfile

  # discount.grpc:
  #   image: ${DOCKER_REGISTRY-}discountgrpc
  #   build:
  #     context: .
  #     dockerfile: Services/Discount/Discount.gRPC/Dockerfile

  # ordering.api:
  #   image: ${DOCKER_REGISTRY-}orderingapi
  #   build:
  #     context: .
  #     dockerfile: Services/Ordering/Ordering.API/Dockerfile
  
  # ocelotapigateway:
  #   image: ${DOCKER_REGISTRY-}ocelotapigateway
  #   build:
  #     context: .
  #     dockerfile: APIGateways/OcelotAPIGateway/Dockerfile

  # shopping.aggregator:
  #   image: ${DOCKER_REGISTRY-}shoppingaggregator
  #   build:
  #     context: .
  #     dockerfile: APIGateways/Shopping.Aggregator/Dockerfile
  #pgadmin:
  #  image: dpage/pgadmin4

  #discount.api:
  #  image: ${DOCKER_REGISTRY-}discountapi
  #  build:
  #    context: .
  #    dockerfile: Services/Discount/Discount.API/Dockerfile
  
  #portainer:
  #  image: portainer/portainer-ce

networks:
  amcart_network:
    driver: bridge

volumes:
   mongo_data:
   identity_data:
   elasticsearch_data:
    driver: local
     # mongodb-catalogdb1:
  #   shared_database:
  #    driver: local

  # postgres_data:
  # pgadmin_data:
  # portainer_data:




