trigger:
  - master

resources:
  - repo: self

variables:
  tag: '$(Build.BuildId)'
  acrRegistry: 'nagp2024amcart0test0acr0.azurecr.io'  # Free Account 'nagp2024amcart0test0acr.azurecr.io'
  azureSubscriptionConnectionString: 'ServiceConnectionAmcart0Test0'  #ServiceConnectionAmcart0Test0
  serviceImageMappings: 'Services/Catalog/Catalog.API=amcart.catalog.api'
  NAMESPACE: amcart
  azureResourceGroup: 'nagp2024amcart0test0'  # Free Account 'nagp2024mcarttest0_rg'
  kubernetesCluster: 'nagp2024amcart0test0akstest0'  # Free Account 'nagp2024amcart0test0akstest0'
  connectionType: 'Azure Resource Manager'

stages:

# -----------------------------------#
#            BUILD STAGE             #
# -----------------------------------#
  - stage: Build
    displayName: 'Build and Push Docker Images'
    jobs:
      - job: BuildJob
        displayName: 'Docker Build'
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          # # Log System.DefaultWorkingDirectory
          # - script: |
          #     echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          #   displayName: "Log System.DefaultWorkingDirectory"

          # # List Files for Debugging
          # - script: |
          #     echo "Files in current directory:"
          #     ls -R $(System.DefaultWorkingDirectory)
          #   displayName: "List All Files"

          # # Clean Docker Cache
          # - script: |
          #     echo "Cleaning Docker cache..."
          #     docker system prune -f
          #   displayName: "Clean Docker Cache"

          # Install Docker
          # Install Docker
          - task: DockerInstaller@0
            displayName: 'Install Docker'
            inputs:
              dockerVersion: '17.09.0-ce'

          # Login to Azure Container Registry (ACR)
          - task: AzureCLI@2
            displayName: 'ACR Login'
            inputs:
              azureSubscription: '$(azureSubscriptionConnectionString)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(acrRegistry)

          # Build and Push Docker Images for All Services
          - task: Docker@2
            displayName: 'Build and Push Catalog API'
            inputs:
              command: buildAndPush
              repository: '$(acrRegistry)/amcart.catalog.api'
              dockerfile: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/Catalog.API/Dockerfile'
              #context: '$(System.DefaultWorkingDirectory)/src/Services/Catalog.API'
              tags: '$(tag)'

          # - task: Docker@2
          #   displayName: 'Build and Push Identity API'
          #   inputs:
          #     command: buildAndPush
          #     repository: '$(acrRegistry)/identity-api'
          #     dockerfile: 'src/Services/Identity.API/Dockerfile'
          #     tags: '$(tag)'

          # - task: Docker@2
          #   displayName: 'Build and Push ProductSearch API'
          #   inputs:
          #     command: buildAndPush
          #     repository: '$(acrRegistry)/productsearch-api'
          #     dockerfile: 'src/Services/ProductSearch.API/Dockerfile'
          #     tags: '$(tag)'

# -----------------------------------#
#            DEPLOY STAGE            #
# -----------------------------------#
  - stage: Deploy
    displayName: 'Deploy to AKS'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: 'Deploy All Services to AKS'
        # pool: SelfHosted
        pool:
         vmImage: ubuntu-latest
        steps:

          # ---------- Catalog API ----------
          - task: Kubernetes@1
            displayName: 'Apply Catalog ConfigMap'
            inputs:
              connectionType: '$(connectionType)'  # Using variable here
              azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
              azureResourceGroup: '$(azureResourceGroup)'
              kubernetesCluster: '$(kubernetesCluster)'
              command: 'apply'
              # configurationType: 'manifest'
              configurationType: 'configuration'  # ✅ Correct value
              # configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/Catalog/catalog-api-config.yaml'
              arguments: '-f "$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/Catalog/catalog-api-config.yaml"'

          # - task: Kubernetes@1
          #   displayName: 'Apply Catalog Secret'
          #   inputs:
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     # configurationType: 'manifest'
          #     configurationType: 'configuration'  # ✅ Correct value
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/Catalog/catalog-api-secret.yaml'

          # - task: Kubernetes@1
          #   displayName: 'Deploy Catalog API'
          #   inputs:
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     # configurationType: 'manifest'
          #     configurationType: 'configuration'  # ✅ Correct value
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/Catalog/catalog-api-deployment.yaml'

          # - script: |
          #     echo "Checking rollout status for Catalog API..."
          #     kubectl rollout status deployment/catalog-api-deployment -n $(NAMESPACE) --timeout=120s
          #   displayName: "Verify Catalog API Rollout"
          #   failOnStderr: true

          # ---------- Identity API ----------
          # - task: Kubernetes@1
          #   displayName: 'Apply Identity ConfigMap'
          #   inputs:
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     configurationType: 'manifest'
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/Identity/identity-api-configmap.yaml'

          # - task: Kubernetes@1
          #   displayName: 'Apply Identity Secret'
          #   inputs:
          #     # connectionType: 'Azure Resource Manager'
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     configurationType: 'manifest'
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/Identity/identity-api-secret.yaml'

          # - task: Kubernetes@1
          #   displayName: 'Deploy Identity API'
          #   inputs:
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     configurationType: 'manifest'
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/Identity/identity-api-deployment.yaml'

          # - script: |
          #     echo "Checking rollout status for Identity API..."
          #     kubectl rollout status deployment/identity-api -n $(NAMESPACE) --timeout=120s
          #   displayName: "Verify Identity API Rollout"
          #   failOnStderr: true

          # ---------- ProductSearch API ----------
          # - task: Kubernetes@1
          #   displayName: 'Apply ProductSearch ConfigMap'
          #   inputs:
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     configurationType: 'manifest'
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/ProductSearch/productsearch-api-configmap.yaml'

          # - task: Kubernetes@1
          #   displayName: 'Apply ProductSearch Secret'
          #   inputs:
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     configurationType: 'manifest'
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/ProductSearch/productsearch-api-secret.yaml'

          # - task: Kubernetes@1
          #   displayName: 'Deploy ProductSearch API'
          #   inputs:
          #     connectionType: '$(connectionType)'  # Using variable here
          #     azureSubscriptionEndpoint: '$(azureSubscriptionConnectionString)'
          #     azureResourceGroup: '$(azureResourceGroup)'
          #     kubernetesCluster: '$(kubernetesCluster)'
          #     command: 'apply'
          #     configurationType: 'manifest'
          #     configuration: '$(System.DefaultWorkingDirectory)/DeploymentScripts/AKS/ProductSearch/productsearch-api-deployment.yaml'

          # - script: |
          #     echo "Checking rollout status for ProductSearch API..."
          #     kubectl rollout status deployment/productsearch-api -n $(NAMESPACE) --timeout=120s
          #   displayName: "Verify ProductSearch API Rollout"
          #   failOnStderr: true