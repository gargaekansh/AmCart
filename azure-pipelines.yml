trigger:
  - master

resources:
  - repo: self

variables:
  tag: '$(Build.BuildId)'
  acrRegistry: 'nagp2024amcart0test0acr0.azurecr.io'  # Free Account 'nagp2024amcart0test0acr.azurecr.io'
  azureSubscriptionConnectionString: 'ServiceConnectionAmcart0Test0'  #ServiceConnectionAmcart0Test0
  serviceImageMappings: 'Services/Catalog/Catalog.API=amcart.catalog.api'
  NAMESPACE: amcart
  azureResourceGroup: 'nagp2024amcart0test0'  # Free Account 'nagp2024mcarttest0_rg'
  kubernetesCluster: 'nagp2024amcart0test0akstest0'  # Free Account 'nagp2024amcart0test0akstest0'
  connectionType: 'Azure Resource Manager'

stages:

# -----------------------------------#
#            BUILD STAGE             #
# -----------------------------------#
  - stage: Build
    displayName: 'Build and Push Docker Images'
    jobs:
      - job: BuildJob
        displayName: 'Docker Build'
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          # Log System.DefaultWorkingDirectory
          - script: |
              echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
            displayName: "Log System.DefaultWorkingDirectory"

          # List Files for Debugging
          - script: |
              echo "Files in current directory:"
              ls -R $(System.DefaultWorkingDirectory)
            displayName: "List All Files"

          # Clean Docker Cache
          - script: |
              echo "Cleaning Docker cache..."
              docker system prune -f
            displayName: "Clean Docker Cache"

          # Install Docker
          - task: DockerInstaller@0
            displayName: 'Install Docker'
            inputs:
              dockerVersion: 'latest'

          # Login to Azure Container Registry (ACR)
          - task: AzureCLI@2
            displayName: 'ACR Login'
            inputs:
              azureSubscription: '$(azureSubscriptionConnectionString)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(acrRegistry)

          # Build and Push Docker Images for All Services
          - task: Docker@2
            displayName: 'Build and Push Catalog API'
            inputs:
              command: buildAndPush
              repository: '$(acrRegistry)/amcart.catalog.api'
              dockerfile: '$(System.DefaultWorkingDirectory)/src/Services/Catalog.API/Dockerfile'
              context: '$(System.DefaultWorkingDirectory)/src/Services/Catalog.API'
              tags: '$(tag)'
